package twopointers

// Когда у Валеры появляется свободное время, он идет в библиотеку и читает книги.
// Вот и сегодня у него появилось t свободных минут для чтения.
// Поэтому Валера взял n книг в библиотеке и для каждой книги оценил:
// какое время потребуется, чтобы ее прочитать. Пронумеруем книги целыми числами от 1 до n.
// Для прочтения i-той книги Валере требуется ai минут.

// Валера решил, что он выберет произвольную книгу с номером i и
// будет читать книги друг за другом, начиная с этой книги.
// Другими словами, сначала он прочитает книгу c номером i,
// затем книгу с номером i + 1,
// затем книгу с номером i + 2 и так далее.
// Он продолжает этот процесс до тех пор,
// пока либо не закончится его свободное время,
// либо не прочитает книгу с номером n.
// Каждую книгу Валера читает целиком,
// то есть он не читает книгу,
// которую не успеет дочитать до конца из-за нехватки свободного времени.

// Посчитайте максимальное количество книг, которое Валера сможет прочитать.

// Входные данные
// time int, books []int
// time - время на чтение
// books - колличество минут на прочтение каждой книги
// соответсвенно кол-во книг = длинна массива

// Выходные данные
// Выведите единственное целое число — максимальное количество книг, которое Валера сможет прочитать.

// тест кейсы
// time 5 books [ 3 1 2 1]
// res 3
// time 3 books [ 2 2 3 ]
// res 1

func FirstProblem(time int, books []int) int {
	left := 0
	sum := 0
	res := 0

	for right, book := range books {
		sum += book
		if sum > time {
			sum -= books[left]
			left++

		}
		if res < right-left+1 {
			res = right - left + 1
		}
	}

	return res
}
